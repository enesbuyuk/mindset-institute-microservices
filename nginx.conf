events {
    worker_connections 1024;
}

http {
    underscores_in_headers on;
    client_max_body_size 10M;
    large_client_header_buffers 4 16k;

    # Common proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Timeout settings
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Upstream definitions
    upstream swagger-service {
        server swagger-service:${SWAGGER_SERVICE_PORT};
    }

    upstream auth-service {
        server auth-service:${AUTH_SERVICE_PORT};
    }

    upstream customer-service {
        server customer-service:${CUSTOMER_SERVICE_PORT};
    }

    upstream sales-service {
        server sales-service:${SALES_SERVICE_PORT};
    }

    # Main server block
    server {
        listen ${NGINX_PORT};

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

        # Swagger documentation
        location /api-docs {
            proxy_pass http://swagger-service;
        }

        # Auth service routes
        location /auth {
            proxy_pass http://auth-service;
        }

        # Customer service route with authentication
        location /customers {
            auth_request /auth/validate;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_user;
            auth_request_set $auth_role $upstream_http_x_role;

            error_page 401 = @error401;
            error_page 403 = @error403;
            proxy_intercept_errors on;

            proxy_set_header X-User $auth_user;
            proxy_set_header X-Role $auth_role;
            proxy_set_header Authorization $http_authorization;
            proxy_pass http://customer-service;

            # Response buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 8k;
        }

        # Sales service route with authentication
        location /sales {
            auth_request /auth/validate;
            auth_request_set $auth_status $upstream_status;
            auth_request_set $auth_user $upstream_http_x_user;
            auth_request_set $auth_role $upstream_http_x_role;

            error_page 401 = @error401;
            error_page 403 = @error403;
            proxy_intercept_errors on;

            proxy_set_header X-User $auth_user;
            proxy_set_header X-Role $auth_role;
            proxy_set_header Authorization $http_authorization;
            proxy_pass http://sales-service;

            # Response buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 8k;
        }

        # Auth validation route
        location = /auth/validate {
            internal;  # Only internal requests allowed
            proxy_pass http://auth-service/auth/validate;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-Original-URI $request_uri;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
        }

        # Error handling locations
        location @error401 {
            return 401 '{"error": "Authentication required"}';
            add_header Content-Type application/json;
        }

        location @error403 {
            return 403 '{"error": "Access forbidden"}';
            add_header Content-Type application/json;
        }


        # Catch-all for any other route
        location / {
            return 404 '{"error": "Not Found"}';
            add_header Content-Type application/json;
        }

        # Logging configuration
        access_log /var/log/nginx/access.log combined buffer=512k flush=1m;
        error_log /var/log/nginx/error.log warn;
    }
}
